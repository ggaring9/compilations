#!/usr/bin/env python
"""
CMS deployment cleanup log
"""

import os
import shutil
import logging

# setting up a logger
LOG_FILE = ''
DEPLOYMENT_DIR = '/var/www/html'

if os.environ.get('CMS_DEBUG', False):
    # running on local machine (probably you're debugging)
    LOG_FILE = 'deployments.log'
    DEPLOYMENT_DIR = os.path.abspath(os.path.dirname(__file__))
    DEPLOYMENT_DIR = os.path.join(DEPLOYMENT_DIR, 'var/www/html')
else:
    # this happens on real machines - we are not testing
    LOG_FILE = '{{ deployment_log_file }}'

formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(formatter)
logger = logging.getLogger('cms deployment cleanup')
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(LOG_FILE)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)


def remove_old_deployments(base_directory):
    """
    This function cares only about links and directories in base_directory
    It assumes that every directory that is not referenced by a symbolic link
    can be removed (no link no party policy)
    """
    # active deployments are the ones with an acrive symlink
    active_deployments = []
    # assume deplyments are all the directories in base_directory
    old_deployments = []
    # get whatever is in base_directory
    for item in os.listdir(base_directory):
        # and convert it to full path
        item = os.path.join(base_directory, item)
        # if item is a symlink, add it to the symlink pool
        if os.path.islink(item):
            logger.debug('skipping: {0} (symlinked)'.format(item))
            active_deployments.append(os.path.realpath(item))
        # if item is a directory, assume it's a potential old deployment, add
        # it to the old deployment list
        elif os.path.isdir(item):
            old_deployments.append(item)
        # files are not take in consideration as they won't fall in any branch
        # so files in base_directory are preserved

    # unactive deployments must be removed, we are not collcting them
    old_deployments = set(old_deployments) - set(active_deployments)
    logger.debug('about to remove: {0}'.format(old_deployments))
    for old_deployment in old_deployments:
        logger.info('removing: {0}'.format(old_deployment))
        shutil.rmtree(old_deployment)

    for active_deployment in active_deployments:
        logger.info('keeping deployment: {0}'.format(active_deployment))


if __name__ == '__main__':
    logger.info('cleaning up old deployments')
    remove_old_deployments(DEPLOYMENT_DIR)

